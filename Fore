import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from prophet import Prophet
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_absolute_error, mean_squared_error
from statsmodels.tsa.seasonal import seasonal_decompose

# -------------------------------
# 1. Load & Preprocess Data
# -------------------------------
df = pd.read_csv("your_file.csv")  # Replace with actual path
df['region'] = df['region'].fillna('NA')
df['iss_entrd_pqms'] = pd.to_datetime(df['iss_entrd_pqms'], errors='coerce')
df['Month'] = df['iss_entrd_pqms'].dt.to_period('M').dt.to_timestamp()
df['Complaint Count'] = 1

required_cols = ['iss_entrd_pqms', 'fmly_lvl2_desc', 'region']
df = df.dropna(subset=required_cols)

# Add global view
df_global = df.copy()
df_global['region'] = 'GLOBAL'
df = pd.concat([df, df_global], ignore_index=True)

# Output directory
output_dir = "region_forecasts"
os.makedirs(output_dir, exist_ok=True)

results = []

# -------------------------------
# 2. Forecasting Loop
# -------------------------------
for region in df['region'].unique():
    print(f"\n🔄 Processing Region: {region}")
    region_df = df[df['region'] == region].copy()
    monthly_df = region_df.groupby('Month').agg({'Complaint Count': 'sum'}).reset_index()

    if len(monthly_df) < 24:
        print(f"⏭️ Skipping {region}: Not enough data.")
        continue

    # --- Prophet ---
    prophet_df = monthly_df.rename(columns={'Month': 'ds', 'Complaint Count': 'y'})
    prophet_model = Prophet(yearly_seasonality=True, monthly_seasonality=True)
    prophet_model.fit(prophet_df)

    future = prophet_model.make_future_dataframe(periods=12, freq='M')
    forecast = prophet_model.predict(future)
    forecast['yhat'] = forecast['yhat'].round()
    prophet_fitted = forecast['yhat'].iloc[:len(prophet_df)].values
    prophet_actual = prophet_df['y'].values
    prophet_rmse = np.sqrt(mean_squared_error(prophet_actual, prophet_fitted))
    prophet_mae = mean_absolute_error(prophet_actual, prophet_fitted)

    # Plot Prophet
    plt.figure(figsize=(10, 4))
    plt.plot(prophet_df['ds'], prophet_df['y'], label='Observed')
    plt.plot(forecast['ds'], forecast['yhat'], label='Forecast')
    plt.fill_between(forecast['ds'], forecast['yhat_lower'], forecast['yhat_upper'], alpha=0.3)
    plt.title(f"{region} - Prophet Forecast")
    plt.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()
    prophet_chart = os.path.join(output_dir, f"{region}_prophet_forecast.png")
    plt.savefig(prophet_chart)
    plt.close()

    # --- ARIMA ---
    ts = monthly_df.set_index('Month')['Complaint Count']
    arima_model = ARIMA(ts, order=(1, 1, 1))
    arima_result = arima_model.fit()
    arima_fitted = arima_result.fittedvalues
    arima_resid = arima_result.resid
    arima_forecast = arima_result.forecast(steps=12).round()

    # ARIMA errors
    arima_actual = ts[1:]  # Due to diff=1
    arima_rmse = np.sqrt(mean_squared_error(arima_actual, arima_fitted))
    arima_mae = mean_absolute_error(arima_actual, arima_fitted)

    # Plot ARIMA
    plt.figure(figsize=(10, 4))
    plt.plot(ts, label='Observed')
    forecast_index = pd.date_range(ts.index[-1] + pd.DateOffset(months=1), periods=12, freq='M')
    plt.plot(forecast_index, arima_forecast, label='ARIMA Forecast')
    plt.title(f"{region} - ARIMA Forecast")
    plt.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()
    arima_chart = os.path.join(output_dir, f"{region}_arima_forecast.png")
    plt.savefig(arima_chart)
    plt.close()

    # --- Best Model ---
    best_model = 'Prophet' if prophet_rmse < arima_rmse else 'ARIMA'
    best_forecast = forecast[['ds', 'yhat']].tail(12).copy() if best_model == 'Prophet' else pd.DataFrame({
        'ds': forecast_index,
        'yhat': arima_forecast.values
    })

    # Export forecast to Excel
    excel_path = os.path.join(output_dir, f"{region}_{best_model}_forecast.xlsx")
    best_forecast.rename(columns={'ds': 'Month', 'yhat': 'Forecasted Complaints'}, inplace=True)
    best_forecast.to_excel(excel_path, index=False)

    results.append({
        'Region': region,
        'Prophet RMSE': round(prophet_rmse, 2),
        'ARIMA RMSE': round(arima_rmse, 2),
        'Prophet MAE': round(prophet_mae, 2),
        'ARIMA MAE': round(arima_mae, 2),
        'Best Model': best_model,
        'Forecast Excel': excel_path,
        'Forecast Chart': prophet_chart if best_model == 'Prophet' else arima_chart
    })

# -------------------------------
# 3. Save Summary
# -------------------------------
summary_df = pd.DataFrame(results)
summary_file = os.path.join(output_dir, "forecast_model_summary.xlsx")
summary_df.to_excel(summary_file, index=False)

print("\n✅ Forecasting complete. Results saved to:", output_dir)
