# pip install pandas numpy matplotlib scikit-learn xgboost prophet openpyxl statsmodels

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from prophet import Prophet
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from sklearn.metrics import mean_absolute_error, mean_squared_error
import warnings

warnings.filterwarnings("ignore")

# ----------------------------
# 1. Load and Prepare Data
# ----------------------------
df = pd.read_csv("your_complaint_data.csv")  # Replace with your actual file
df['region'] = df['region'].fillna('NA')
df['iss_entrd_pqms'] = pd.to_datetime(df['iss_entrd_pqms'], errors='coerce')
df['Month'] = df['iss_entrd_pqms'].dt.to_period('M').dt.to_timestamp()
df['Complaint Count'] = 1

# Drop NA required fields
df = df.dropna(subset=['iss_entrd_pqms', 'region'])

# Add Global as a Region
global_df = df.groupby('Month', as_index=False)['Complaint Count'].sum()
global_df['region'] = 'Global'
df = pd.concat([df, global_df], ignore_index=True)

# ----------------------------
# 2. Setup Output Folder
# ----------------------------
output_dir = "region_forecasts"
os.makedirs(output_dir, exist_ok=True)

# ----------------------------
# 3. Model Evaluation Function
# ----------------------------
def evaluate_models(monthly_df):
    monthly_df = monthly_df.set_index('Month').asfreq('M')
    y = monthly_df['Complaint Count'].values
    X = np.arange(len(y)).reshape(-1, 1)

    results = {}

    # Prophet
    df_p = monthly_df.reset_index().rename(columns={'Month': 'ds', 'Complaint Count': 'y'})
    prophet_model = Prophet(yearly_seasonality=True)
    prophet_model.fit(df_p)
    future = prophet_model.make_future_dataframe(periods=12, freq='M')
    forecast = prophet_model.predict(future)
    yhat = forecast['yhat'][:len(y)]
    rmse = np.sqrt(mean_squared_error(y, yhat))
    results['Prophet'] = {
        'rmse': rmse,
        'forecast': forecast[['ds', 'yhat']].tail(12),
        'fitted': yhat,
        'residuals': y - yhat
    }

    # Holt-Winters
    hw_model = ExponentialSmoothing(y, seasonal='add', seasonal_periods=12).fit()
    yhat_hw = hw_model.fittedvalues
    forecast_hw = hw_model.forecast(12)
    rmse_hw = np.sqrt(mean_squared_error(y, yhat_hw))
    results['Holt-Winters'] = {
        'rmse': rmse_hw,
        'forecast': forecast_hw,
        'fitted': yhat_hw,
        'residuals': y - yhat_hw
    }

    # Random Forest
    rf = RandomForestRegressor()
    rf.fit(X, y)
    yhat_rf = rf.predict(X)
    forecast_rf = rf.predict(np.arange(len(y), len(y) + 12).reshape(-1, 1))
    rmse_rf = np.sqrt(mean_squared_error(y, yhat_rf))
    results['Random Forest'] = {
        'rmse': rmse_rf,
        'forecast': forecast_rf,
        'fitted': yhat_rf,
        'residuals': y - yhat_rf
    }

    # XGBoost
    xgb = XGBRegressor(objective='reg:squarederror')
    xgb.fit(X, y)
    yhat_xgb = xgb.predict(X)
    forecast_xgb = xgb.predict(np.arange(len(y), len(y) + 12).reshape(-1, 1))
    rmse_xgb = np.sqrt(mean_squared_error(y, yhat_xgb))
    results['XGBoost'] = {
        'rmse': rmse_xgb,
        'forecast': forecast_xgb,
        'fitted': yhat_xgb,
        'residuals': y - yhat_xgb
    }

    # Choose Best Model
    best_model = min(results, key=lambda k: results[k]['rmse'])
    return best_model, results[best_model], monthly_df.index.to_timestamp(), y

# ----------------------------
# 4. Run Forecast Per Region
# ----------------------------
summary = []

for region in df['region'].unique():
    region_df = df[df['region'] == region]
    monthly_df = region_df.groupby('Month', as_index=False)['Complaint Count'].sum()

    if len(monthly_df) < 12:
        continue

    best_model, result, months, actual = evaluate_models(monthly_df)

    # Forecast Dates
    future_months = pd.date_range(start=months[-1] + pd.offsets.MonthBegin(), periods=12, freq='M')
    if best_model == 'Prophet':
        forecast_df = result['forecast']
        forecast_df.columns = ['Month', 'Predicted Complaints']
    else:
        forecast_df = pd.DataFrame({
            'Month': future_months,
            'Predicted Complaints': result['forecast']
        })

    # Save Forecast Excel
    forecast_df.to_excel(os.path.join(output_dir, f"{region}_forecast.xlsx"), index=False)

    # Plot Forecast + Residuals
    fig, axes = plt.subplots(1, 2, figsize=(14, 5))
    axes[0].plot(months, actual, label='Actual')
    axes[0].plot(months, actual - result['residuals'], label='Fitted')
    axes[0].set_title(f"{region} Forecast ({best_model})")
    axes[0].legend()
    axes[0].tick_params(axis='x', rotation=45)

    axes[1].plot(months, result['residuals'], color='orange')
    axes[1].axhline(0, linestyle='--', color='red')
    axes[1].set_title(f"{region} Residuals ({best_model})")
    axes[1].tick_params(axis='x', rotation=45)

    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, f"{region}_forecast_residual.png"))
    plt.close()

    summary.append({
        'Region': region,
        'Best Model': best_model,
        'RMSE': round(result['rmse'], 2)
    })

# Save Summary
pd.DataFrame(summary).to_excel(os.path.join(output_dir, "forecast_model_summary.xlsx"), index=False)

print("âœ… Forecasts, plots, and Excel files saved in:", output_dir)
