import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
from prophet import Prophet
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_absolute_error, mean_squared_error

# ---- LOAD AND PREP DATA ----
df = pd.read_csv("your_data.csv")  # Replace with your dataset
df['region'] = df['region'].fillna('NA')
df['iss_entrd_pqms'] = pd.to_datetime(df['iss_entrd_pqms'], errors='coerce')
df['Month'] = df['iss_entrd_pqms'].dt.to_period('M').dt.to_timestamp()
df['Complaint Count'] = 1
df = df.dropna(subset=['iss_entrd_pqms', 'region'])

# Add Global
global_df = df.groupby('Month', as_index=False)['Complaint Count'].sum()
global_df['region'] = 'Global'
df = pd.concat([df, global_df], ignore_index=True)

# ---- SETUP OUTPUT DIR ----
output_dir = "region_forecasts"
os.makedirs(output_dir, exist_ok=True)

# ---- MODELING FUNCTION ----
def evaluate_models(monthly_df):
    monthly_df = monthly_df.set_index('Month').asfreq('M')
    y = monthly_df['Complaint Count']
    index = y.index

    # Prophet
    prophet_df = y.reset_index().rename(columns={'Month': 'ds', 'Complaint Count': 'y'})
    prophet = Prophet(yearly_seasonality=True)
    prophet.fit(prophet_df)
    future = prophet.make_future_dataframe(periods=12, freq='M')
    forecast = prophet.predict(future)
    prophet_fitted = forecast['yhat'][:len(y)].values
    prophet_forecast = forecast[['ds', 'yhat']].tail(12)
    prophet_rmse = np.sqrt(mean_squared_error(y, prophet_fitted))
    prophet_resid = y.values - prophet_fitted

    # Holt-Winters
    hw = ExponentialSmoothing(y, seasonal='add', seasonal_periods=12).fit()
    hw_fitted = hw.fittedvalues
    hw_forecast = hw.forecast(12)
    hw_rmse = np.sqrt(mean_squared_error(y, hw_fitted))
    hw_resid = y.values - hw_fitted

    # ARIMA
    arima = ARIMA(y, order=(1, 1, 1)).fit()
    arima_fitted = arima.predict(start=1, end=len(y), typ='levels')
    arima_forecast = arima.forecast(12)
    arima_rmse = np.sqrt(mean_squared_error(y[1:], arima_fitted))
    arima_resid = y[1:].values - arima_fitted

    models = {
        'Prophet': (prophet_rmse, prophet_forecast, y, prophet_fitted, prophet_resid),
        'Holt-Winters': (hw_rmse, hw_forecast, y, hw_fitted, hw_resid),
        'ARIMA': (arima_rmse, arima_forecast, y[1:], arima_fitted, arima_resid)
    }

    best_model = min(models.items(), key=lambda x: x[1][0])
    return best_model[0], best_model[1]

# ---- LOOP THROUGH REGIONS ----
summary = []

for region in df['region'].unique():
    print(f"\nProcessing: {region}")
    region_df = df[df['region'] == region]
    monthly_df = region_df.groupby('Month', as_index=False)['Complaint Count'].sum()

    if len(monthly_df) < 15:
        print(f"Skipping {region} - not enough data.")
        continue

    best_model_name, (rmse, forecast, y_true, fitted, resid) = evaluate_models(monthly_df)

    # Forecast Output
    if isinstance(forecast, pd.DataFrame):
        forecast_df = forecast.rename(columns={'ds': 'Month', 'yhat': 'Predicted Complaints'})
    else:
        forecast_df = pd.DataFrame({
            'Month': pd.date_range(start=monthly_df['Month'].max() + pd.offsets.MonthBegin(),
                                   periods=12, freq='M'),
            'Predicted Complaints': forecast.values
        })

    forecast_path = os.path.join(output_dir, f"{region}_forecast.xlsx")
    forecast_df.to_excel(forecast_path, index=False)

    # Plot forecast + residuals
    plt.figure(figsize=(14, 5))
    plt.subplot(1, 2, 1)
    plt.plot(y_true.index, y_true.values, label='Actual')
    plt.plot(y_true.index, fitted, label='Fitted')
    plt.title(f"{region} - {best_model_name} Forecast")
    plt.legend()
    plt.xticks(rotation=45)

    plt.subplot(1, 2, 2)
    plt.plot(y_true.index, resid)
    plt.axhline(0, color='red', linestyle='--')
    plt.title(f"{region} - Residuals")
    plt.xticks(rotation=45)

    plt.tight_layout()
    chart_path = os.path.join(output_dir, f"{region}_{best_model_name}_forecast_plot.png")
    plt.savefig(chart_path)
    plt.close()

    summary.append({
        'Region': region,
        'Best Model': best_model_name,
        'RMSE': round(rmse, 2),
        'Forecast Excel': forecast_path,
        'Forecast Plot': chart_path
    })

# ---- SAVE SUMMARY ----
summary_df = pd.DataFrame(summary)
summary_df.to_excel(os.path.join(output_dir, "forecast_summary.xlsx"), index=False)
print("\nâœ… Forecasts and summaries saved.")
