import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from datetime import datetime, timedelta
from wordcloud import WordCloud

# -------------------------------
# LOAD DATA AND SETUP
# -------------------------------

data = pd.read_csv("updated_complaints_data.csv", parse_dates=["Date Received", "Closed Date"])
data['Month-Year'] = data['Date Received'].dt.to_period('M').astype(str)

# Simulate 'Product' and 'Complaint Description' fields if missing
if 'Product' not in data.columns:
    data['Product'] = np.random.choice(['PainRelief', 'ColdCure', 'HeartHealth', 'AllergyFix', 'VitaminBoost'], size=len(data))
if 'Complaint Description' not in data.columns:
    data['Complaint Description'] = ["Example complaint about packaging issues"] * len(data)

# Simulate 'Date Entered' over the last 200 days
date_range = pd.date_range(end=datetime.today(), periods=len(data), freq='D')
data['Date Entered'] = np.random.choice(date_range, size=len(data))

# Regions and metrics
regions = ['APAC', 'EMEA', 'LATAM', 'NA']
metrics_titles = ['Complaint Timeliness', 'Open Aging Overdue', 'Complaint Aging',
                  'Change Log Timeliness', 'MFT Timeliness', 'Triage Timeliness']

# -------------------------------
# FUNCTIONS
# -------------------------------

def calculate_dates_for_previous_month():
    current_date = datetime.now()
    first_day_of_current_month = current_date.replace(day=1)
    last_day_of_previous_month = first_day_of_current_month - timedelta(days=1)
    previous_month = last_day_of_previous_month.month
    previous_year = last_day_of_previous_month.year
    start_date = datetime(previous_year, previous_month, 1)

    while start_date.month == previous_month:
        end_date = start_date + timedelta(days=27)
        next_month_start = (end_date + timedelta(days=1)).replace(day=1)
        days_remaining = (next_month_start - end_date - timedelta(days=1)).days

        if days_remaining == 7:
            end_date += timedelta(days=days_remaining)

        return start_date - timedelta(days=45), end_date - timedelta(days=45)

def extract_data_for_previous_month(df):
    df['Date Entered'] = pd.to_datetime(df['Date Entered'], errors='coerce')
    start_date, end_date = calculate_dates_for_previous_month()
    return df[(df['Date Entered'] >= start_date) & (df['Date Entered'] <= end_date)]

def create_metrics(df, region):
    df = df[df['Region'] == region].drop_duplicates(subset='Tracking Number')
    closed = df[df['Closed Date'].notna()]
    total_closed = closed.shape[0]
    closed_early = closed[closed['Issue Age'] <= 45].shape[0]
    complaint_timeliness = (closed_early / total_closed * 100) if total_closed > 0 else 0

    open_cases = df[df['Issue Status'] == 'Open']
    open_aging = open_cases[(open_cases['Issue Age'] > 45) & (open_cases['Issue Age'] <= 365)].shape[0]
    complaint_aging = open_cases[open_cases['Issue Age'] > 365].shape[0]

    open_aging_pct = (open_aging / total_closed * 100) if total_closed > 0 else 0
    complaint_aging_pct = (complaint_aging / total_closed * 100) if total_closed > 0 else 0

    mft_cases = df[df['Closure ID'] == 'Mcward']
    mft_timeliness = (mft_cases[mft_cases['Issue Age'] <= 45].shape[0] / len(mft_cases) * 100) if len(mft_cases) > 0 else 0

    changelog_cases = df[df['Closure ID'] != 'Mcward']
    changelog_timeliness = (changelog_cases[changelog_cases['Issue Age'] <= 45].shape[0] / len(changelog_cases) * 100) if len(changelog_cases) > 0 else 0

    triage_cases = df[df['Process Step'].str.lower() == 'step']
    triage_timeliness = (triage_cases[triage_cases['Issue Age'] <= 45].shape[0] / len(triage_cases) * 100) if len(triage_cases) > 0 else 0

    return {
        'Complaint Timeliness': complaint_timeliness,
        'Open Aging Overdue': open_aging_pct,
        'Complaint Aging': complaint_aging_pct,
        'Change Log Timeliness': changelog_timeliness,
        'MFT Timeliness': mft_timeliness,
        'Triage Timeliness': triage_timeliness
    }

def plot_doughnut(ax, early_pct, label, title):
    late_pct = 100 - early_pct
    ax.pie(
        [early_pct, late_pct],
        labels=[f"Early: {early_pct:.1f}%", f"Late: {late_pct:.1f}%"],
        startangle=90,
        counterclock=False,
        colors=['green', 'red'],
        wedgeprops={'width': 0.3}
    )
    ax.set_title(f"{title}\n({label})", fontsize=10)

# -------------------------------
# FILTER DATA & CREATE PDF
# -------------------------------

filtered_df = extract_data_for_previous_month(data)
filtered_start, filtered_end = calculate_dates_for_previous_month()
report_title = f"Global CV Oversight Monthly Report - {filtered_end.strftime('%B %Y')}"
title_range_str = f"Data Period: {filtered_start.strftime('%b %d, %Y')} to {filtered_end.strftime('%b %d, %Y')}"
dashboard_link = "https://your-dashboard-link.com"

pdf_path = "Global_CV_Oversight_Monthly_Report_Filtered.pdf"
pdf = PdfPages(pdf_path)

# Title Page
fig_title = plt.figure(figsize=(11, 8.5))
plt.axis('off')
plt.text(0.5, 0.75, report_title, fontsize=24, ha='center', weight='bold')
plt.text(0.5, 0.6, title_range_str, fontsize=14, ha='center')
plt.text(0.5, 0.45, "See more detail:", fontsize=14, ha='center')
plt.text(0.5, 0.4, dashboard_link, fontsize=12, ha='center', color='blue')
pdf.savefig(fig_title)
plt.close(fig_title)

# Doughnut Charts
for metric in metrics_titles:
    fig, axs = plt.subplots(1, 4, figsize=(14, 4))
    fig.suptitle(f"{metric} (Doughnut Chart)", fontsize=14)
    for i, region in enumerate(regions):
        pct = create_metrics(filtered_df, region)[metric]
        plot_doughnut(axs[i], pct, region, metric)
    pdf.savefig(fig)
    plt.close(fig)

# Grouped Bar Charts
for metric in metrics_titles:
    history = []
    for month in sorted(filtered_df['Month-Year'].unique()):
        monthly = filtered_df[filtered_df['Month-Year'] == month]
        row = {'Month-Year': month}
        for region in regions:
            row[region] = create_metrics(monthly, region)[metric]
        history.append(row)
    df_hist = pd.DataFrame(history).set_index("Month-Year")

    fig, ax = plt.subplots(figsize=(14, 6))
    index = np.arange(len(df_hist))
    bar_width = 0.2
    for i, region in enumerate(regions):
        ax.bar(index + i * bar_width, df_hist[region], width=bar_width, label=region)
    ax.set_title(f"Monthly Trend: {metric} (Grouped Bar Chart)")
    ax.set_ylabel("Percentage")
    ax.set_xticks(index + bar_width * 1.5)
    ax.set_xticklabels(df_hist.index, rotation=90)
    ax.legend()
    pdf.savefig(fig)
    plt.close(fig)

# Word Clouds
for region in regions:
    region_df = filtered_df[filtered_df['Region'] == region]
    top_products = region_df['Product'].value_counts().nlargest(3).index.tolist()
    for product in top_products:
        desc_text = " ".join(region_df[region_df['Product'] == product]['Complaint Description'].dropna().astype(str))
        if desc_text.strip():
            wc = WordCloud(width=1600, height=800, background_color='white').generate(desc_text)
            fig_wc = plt.figure(figsize=(14, 7))
            plt.imshow(wc, interpolation='bilinear')
            plt.axis('off')
            plt.title(f"Word Cloud for '{product}' in {region}", fontsize=18)
            pdf.savefig(fig_wc)
            plt.close(fig_wc)

pdf.close()
print(f"Report saved to: {pdf_path}")
