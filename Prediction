# Install and load required libraries
install.packages(c("forecast", "ggplot2", "dplyr", "lubridate"))
library(forecast)
library(ggplot2)
library(dplyr)
library(lubridate)

# Step 1: Simulate Sample Monthly Complaint Data
set.seed(123)  # For reproducibility
sample_dates <- seq(as.Date("2020-01-01"), as.Date("2023-12-01"), by = "month")
sample_complaints <- rnorm(length(sample_dates), mean = 100, sd = 20) + 
                     seq(1, length(sample_dates), by = 1) * 0.5  # Adding a slight trend

# Create a data frame
data <- data.frame(date = sample_dates, complaint_count = round(sample_complaints))

# Step 2: Convert to Time Series
# Convert to a time series object for monthly data
complaints_ts <- ts(data$complaint_count, 
                    start = c(year(min(data$date)), month(min(data$date))), 
                    frequency = 12)  # Monthly data, so frequency = 12

# Step 3: Visualize the Data
# Plot the time series to observe any trends or seasonality
autoplot(complaints_ts) +
  labs(title = "Monthly Complaint Counts (Simulated Data)", 
       x = "Year", 
       y = "Number of Complaints") +
  theme_minimal()

# Step 4: Decompose the Time Series (Optional)
# Decompose to observe trend, seasonality, and residuals
decomposed <- decompose(complaints_ts)
autoplot(decomposed) +
  labs(title = "Decomposition of Monthly Complaint Counts")

# Step 5: Build a Forecasting Model
# Use an ARIMA model for forecasting
model <- auto.arima(complaints_ts, seasonal = TRUE)

# Display the summary of the model
summary(model)

# Step 6: Forecast Future Complaints
# Forecast for the next 12 months (1 year)
forecasted_values <- forecast(model, h = 12)

# Plot the forecast
autoplot(forecasted_values) +
  labs(title = "Forecasted Monthly Complaint Counts", 
       x = "Year", 
       y = "Number of Complaints") +
  theme_minimal()

# Step 7: Print Forecasted Values
print(forecasted_values)

# Step 8: Evaluate the Model (Optional)
# Check model accuracy
accuracy(model)
