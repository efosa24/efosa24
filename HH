df= pd.concat([df1,df2,df3,df4], ignore_index=True)

import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Sample data loading (adjust to your actual file paths)
df1 = pd.read_csv("cases_timeframe.csv")  # Data for closed_early_cases
df2 = pd.read_csv("cases_open.csv")  # Data for complaint_aging_value

# --- Step 1: Preprocessing for df1 (Closed Early Cases) ---
# Process df1 for closed_early_cases (specific time frame)
df1['iss_entrd_pqms'] = pd.to_datetime(df1['iss_entrd_pqms'], format='mixed')
df1['jnj_aware_dt'] = pd.to_datetime(df1['jnj_aware_dt'], format='mixed')

df1['date difference'] = (df1['iss_entrd_pqms'] - df1['jnj_aware_dt']).dt.days
df1['adjusted_issue_age'] = (df1['issue_age'] - df1['date difference'])

df1['Priority'] = df1['seriousness'].apply(assign_priority)
df1 = df1.sort_values(by=['tracking_no_link', 'Priority'])
df1 = df1.drop_duplicates(subset='tracking_no_link', keep='first')

# Apply processing to df1
df1_filtered = processed_data(df1)

# --- Step 2: Preprocessing for df2 (Complaint Aging and Overdue) ---
# Process df2 for complaint_aging_value (open-ended)
df2['iss_entrd_pqms'] = pd.to_datetime(df2['iss_entrd_pqms'], format='mixed')
df2['jnj_aware_dt'] = pd.to_datetime(df2['jnj_aware_dt'], format='mixed')

df2['date difference'] = (df2['iss_entrd_pqms'] - df2['jnj_aware_dt']).dt.days
df2['adjusted_issue_age'] = (df2['issue_age'] - df2['date difference'])

df2['Priority'] = df2['seriousness'].apply(assign_priority)
df2 = df2.sort_values(by=['tracking_no_link', 'Priority'])
df2 = df2.drop_duplicates(subset='tracking_no_link', keep='first')

# Apply processing to df2
df2_filtered = processed_data(df2)

# --- Step 3: Calculate KPIs for both data sources ---
# Calculate KPIs for df1 (closed_early_cases)
def calculate_kpis_df1(df_filtered, region_companies):
    region_df = df_filtered[df_filtered['company'].isin(region_companies)]
    total_cases = region_df.shape[0]
    
    closed_early_cases = region_df[(region_df['adjusted_issue_age'] <= 45)].shape[0]
    closed_early_value = (closed_early_cases / total_cases) if total_cases > 0 else 0
    
    return total_cases, closed_early_cases, closed_early_value

# Calculate KPIs for df2 (complaint_aging_value)
def calculate_kpis_df2(df_filtered, region_companies):
    region_df = df_filtered[df_filtered['company'].isin(region_companies)]
    total_cases = region_df.shape[0]
    
    complaint_aging_cases = region_df[(region_df['issue_status'] == 'Open') & (region_df['adjusted_issue_age'] > 365)].shape[0]
    complaint_aging_overdue_cases = region_df[(region_df['issue_status'] == 'Open') & (region_df['adjusted_issue_age'] > 45)].shape[0]
    
    complaint_aging_value = (complaint_aging_cases) if total_cases > 0 else 0
    complaint_aging_overdue_value = (complaint_aging_overdue_cases) if total_cases > 0 else 0
    
    return total_cases, complaint_aging_value, complaint_aging_overdue_value

# --- Step 4: Loop through regions and calculate metrics for both data sources ---
regions = {
    'NA': ["J&J Consumer", "NUTRITIONALS", "McNeil Consumer", "J&J Canada", "North America Consumer", "North America Drug"],
    'APAC': ['APAC'],
    'EMEA': ['EMEA'],
    'LATAM': ['LATAM']
}

final_data = {
    'KPI_Name': [],
    'functionname': [],
    'Organization': [],
    'Month': [],
    'Value': []
}

# Calculate metrics for both sources (df1 and df2)
for region, companies in regions.items():
    # Calculate for df1 (closed_early_cases)
    total_cases_df1, closed_early_cases, closed_early_value = calculate_kpis_df1(df1_filtered, companies)
    
    # Calculate for df2 (complaint_aging_value)
    total_cases_df2, complaint_aging_value, complaint_aging_overdue_value = calculate_kpis_df2(df2_filtered, companies)
    
    # Complaint Timeliness (from df1)
    final_data['KPI_Name'].extend(['Complaint Timeliness'] * 2)
    final_data['functionname'].extend(['Denominator', 'Numerator'])
    final_data['Organization'].extend([region] * 2)
    final_data['Month'].extend([previous_month] * 2)
    final_data['Value'].extend([total_cases_df1, closed_early_cases])

    # Complaint Aging (from df2)
    final_data['KPI_Name'].extend(['Complaint Aging'] * 2)
    final_data['functionname'].extend(['Denominator', 'Numerator'])
    final_data['Organization'].extend([region] * 2)
    final_data['Month'].extend([previous_month] * 2)
    final_data['Value'].extend([total_cases_df2, complaint_aging_value])

    # Complaint Aging Overdue (from df2)
    final_data['KPI_Name'].extend(['Complaint Aging Overdue'] * 2)
    final_data['functionname'].extend(['Denominator', 'Numerator'])
    final_data['Organization'].extend([region] * 2)
    final_data['Month'].extend([previous_month] * 2)
    final_data['Value'].extend([total_cases_df2, complaint_aging_overdue_value])

# Final DataFrame
final_df = pd.DataFrame(final_data)


# Path to save report to Excel
final_df.to_excel('C:/Users/FEriam01/OneDrive - Kenvue/Documents/Enterprise metrics/2025/Feb 2025/New_final_output_Feb.xlsx', index=False)

