import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from prophet import Prophet
import xgboost as xgb
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# Load dataset
df = pd.read_csv("jj_complaints.csv")

# Convert 'Date' to datetime
df['Date'] = pd.to_datetime(df['Date'])

# Aggregate complaints by month
df['YearMonth'] = df['Date'].dt.to_period('M')
monthly_complaints = df.groupby('YearMonth').size().reset_index(name='Complaint_Volume')
monthly_complaints['YearMonth'] = monthly_complaints['YearMonth'].astype(str)
monthly_complaints['YearMonth'] = pd.to_datetime(monthly_complaints['YearMonth'])

# Apply Sentiment Analysis
analyzer = SentimentIntensityAnalyzer()
df['Sentiment_Score'] = df['Complaint_Text'].apply(lambda x: analyzer.polarity_scores(str(x))['compound'])
monthly_sentiment = df.groupby('YearMonth')['Sentiment_Score'].mean().reset_index()

# Aggregate marketing spend by month
monthly_marketing = df.groupby('YearMonth')['Marketing_Spend'].sum().reset_index()

# Merge all data
data = monthly_complaints.merge(monthly_sentiment, on='YearMonth', how='left')
data = data.merge(monthly_marketing, on='YearMonth', how='left')

# Fill missing values
data.fillna(0, inplace=True)

# Create lag features (last 3 months of complaint volume)
data['Lag_1'] = data['Complaint_Volume'].shift(1)
data['Lag_2'] = data['Complaint_Volume'].shift(2)
data['Lag_3'] = data['Complaint_Volume'].shift(3)

# Rolling Averages
data['Rolling_3'] = data['Complaint_Volume'].rolling(3).mean()
data['Rolling_6'] = data['Complaint_Volume'].rolling(6).mean()

# Drop first few rows with NaN due to lag features
data.dropna(inplace=True)

# Normalize Features
scaler = MinMaxScaler()
scaled_features = scaler.fit_transform(data[['Complaint_Volume', 'Sentiment_Score', 'Marketing_Spend', 'Lag_1', 'Lag_2', 'Lag_3', 'Rolling_3', 'Rolling_6']])
data_scaled = pd.DataFrame(scaled_features, columns=['Complaint_Volume', 'Sentiment_Score', 'Marketing_Spend', 'Lag_1', 'Lag_2', 'Lag_3', 'Rolling_3', 'Rolling_6'])
data_scaled['YearMonth'] = data['YearMonth']

# Train-Test Split (80% Train, 20% Test)
train_size = int(len(data_scaled) * 0.8)
train, test = data_scaled.iloc[:train_size], data_scaled.iloc[train_size:]

# Prepare Data for Prophet
prophet_data = data[['YearMonth', 'Complaint_Volume']].rename(columns={'YearMonth': 'ds', 'Complaint_Volume': 'y'})

# Prophet Model
prophet = Prophet()
prophet.fit(prophet_data)

future = prophet.make_future_dataframe(periods=len(test), freq='M')
forecast_prophet = prophet.predict(future)
forecast_prophet = forecast_prophet[['ds', 'yhat']].tail(len(test))

# RMSE for Prophet
rmse_prophet = np.sqrt(mean_squared_error(test['Complaint_Volume'].values, forecast_prophet['yhat'].values))

# Prepare Data for XGBoost
X_train, y_train = train.drop(['Complaint_Volume', 'YearMonth'], axis=1), train['Complaint_Volume']
X_test, y_test = test.drop(['Complaint_Volume', 'YearMonth'], axis=1), test['Complaint_Volume']

# XGBoost Model
xgb_model = xgb.XGBRegressor(objective='reg:squarederror', n_estimators=100)
xgb_model.fit(X_train, y_train)
xgb_pred = xgb_model.predict(X_test)

# RMSE for XGBoost
rmse_xgb = np.sqrt(mean_squared_error(y_test, xgb_pred))

# Prepare Data for LSTM
X_train_lstm = np.array(X_train).reshape(X_train.shape[0], X_train.shape[1], 1)
X_test_lstm = np.array(X_test).reshape(X_test.shape[0], X_test.shape[1], 1)

# LSTM Model
model = Sequential([
    LSTM(50, activation='relu', return_sequences=True, input_shape=(X_train_lstm.shape[1], 1)),
    Dropout(0.2),
    LSTM(50, activation='relu'),
    Dropout(0.2),
    Dense(1)
])

model.compile(optimizer='adam', loss='mse')
model.fit(X_train_lstm, y_train, epochs=20, batch_size=8, verbose=0)

# Predictions
lstm_pred = model.predict(X_test_lstm).flatten()

# RMSE for LSTM
rmse_lstm = np.sqrt(mean_squared_error(y_test, lstm_pred))

# Model Selection
rmse_scores = {'Prophet': rmse_prophet, 'XGBoost': rmse_xgb, 'LSTM': rmse_lstm}
best_model = min(rmse_scores, key=rmse_scores.get)

print(f"RMSE Scores: {rmse_scores}")
print(f"Best Model: {best_model}")

# Plot results
plt.figure(figsize=(10, 5))
plt.plot(test['YearMonth'], y_test, label='Actual', color='black')
plt.plot(test['YearMonth'], forecast_prophet['yhat'], label='Prophet', linestyle='dashed')
plt.plot(test['YearMonth'], xgb_pred, label='XGBoost', linestyle='dotted')
plt.plot(test['YearMonth'], lstm_pred, label='LSTM', linestyle='dashdot')
plt.legend()
plt.xlabel('Date')
plt.ylabel('Complaint Volume')
plt.title('Model Predictions vs Actual Complaint Volume')
plt.xticks(rotation=45)
plt.show()
