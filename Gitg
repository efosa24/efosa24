import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Load the dataset
df = pd.read_csv("C:/Users/FEriam01/OneDrive/Documents/Oversight metrics/2025/April/Data.csv")

# Convert dates
df['iss_entrd_pqms'] = pd.to_datetime(df['iss_entrd_pqms'], format='mixed')
df['jnj_aware_dt'] = pd.to_datetime(df['jnj_aware_dt'], format='mixed')

# Calculate adjusted age
df['date difference'] = (df['iss_entrd_pqms'] - df['jnj_aware_dt']).dt.days
df['adjusted_issue_age'] = df['issue_age'] - df['date difference']

# Assign priority
def assign_priority(seriousness):
    if seriousness in ["Serious", "Priority"]:
        return 1
    elif seriousness in ["Non-Priority", "Non-Serious"]:
        return 2
    elif seriousness in ["Lack of Effect", "Adverse Event", "AE Level 1", "AE Level 2", "AE Level 3", "Serious AE"]:
        return 3
    elif seriousness == "Preference":
        return 4
    return None

df['Priority'] = df['seriousness'].apply(assign_priority)
df = df.sort_values(by=['tracking_no_link', 'Priority']).drop_duplicates('tracking_no_link', keep='first')

# Enterprise classification
def processed_data(df):
    df['Enterprise'] = np.where(
        df['seriousness'].isin(['Adverse Event', 'AE Level 1', 'AE Level 2', 'AE Level 3', 'Serious AE']),
        'Adverse Event',
        np.where(
            df['seriousness'].isin(['Non-Serious', 'Serious', 'Lack of Effect', 'Priority', 'Non-Priority']),
            'PQC',
            np.where(df['seriousness'] == 'Preference', 'Preference', np.nan)
        )
    )
    return df[~((df['Enterprise'] == 'Adverse Event') & (~df['reg_class'].isin(['MEDICAL DEVICE', 'MEDICAL DEVICE II'])))]

df_filtered = processed_data(df)

# Add flags and other derived columns
df_filtered['Late?'] = np.where(df_filtered['adjusted_issue_age'] > 45, 'Late', 'Not Late')
df_filtered['tracking_no_link'] = df_filtered['tracking_no_link'].astype(str)
df_filtered['Number'] = df_filtered['tracking_no_link'].str[:3]
df_filtered['Dup'] = ""

# Country assignment
def check_country(df):
    df['US_CAN'] = 'No country information found'
    for i, row in df.iterrows():
        name = row['prod_fmly_nm']
        if "CAN" in name:
            df.at[i, 'US_CAN'] = "Canada"
        elif "USA" in name or "SA" in name:
            df.at[i, 'US_CAN'] = "USA"
        elif "AP" in name:
            df.at[i, 'US_CAN'] = "APAC"
        elif "CA" in name or "NA" in name:
            df.at[i, 'US_CAN'] = "Canada"
        elif "EU" in name:
            df.at[i, 'US_CAN'] = "EMEA"
    return df

df_filtered = check_country(df_filtered)

# Define region mapping
regions = {
    'NA': ["J&J Consumer", "NUTRITIONALS", "McNeil Consumer", "J&J Canada", "North America Consumer", "North America Drug"],
    'APAC': ['APAC'],
    'EMEA': ['EMEA'],
    'LATAM': ['LATAM'],
    'McNeil': ["McNeil Nutritionals", "McNeil US OTC Home Office", "McNeil EM Investigator", "Fort Washington", "Lancaster", "Las Piedras", "Guelph"]
}

# Define fields for export
region_fields = {
    'NA': [...],  # Add your specific NA fields here
    'APAC': [...],  # Same
    'EMEA': [...],
    'LATAM': [...],
    'McNeil': [...]
}

# Previous month
def get_previous_month():
    today = datetime.today()
    last_month = today.replace(day=1) - timedelta(days=1)
    return last_month.strftime('%m/%d/%Y')

previous_month = get_previous_month()

# Export region data
for region, companies in regions.items():
    if region == 'McNeil':
        region_df = df_filtered[df_filtered['owner_grp'].isin(companies)]
    else:
        region_df = df_filtered[df_filtered['company'].isin(companies)]
    
    fields = region_fields[region]
    output_df = region_df[fields]
    output_df.to_excel(f"{region}_New_Cal_data.xlsx", index=False)
    print(f"{region} data saved.")

# KPI calculator
def calculate_kpis(df_filtered, region_companies, region_name):
    if region_name == 'McNeil':
        region_df = df_filtered[df_filtered['owner_grp'].isin(region_companies)]
    else:
        region_df = df_filtered[df_filtered['company'].isin(region_companies)]

    total = region_df.shape[0]
    closed_early = region_df[region_df['adjusted_issue_age'] <= 45].shape[0]
    aging = region_df[(region_df['issue_status'] == 'Open') & (region_df['issue_age'] > 365)].shape[0]
    overdue = region_df[(region_df['issue_status'] == 'Open') & (region_df['issue_age'] > 45)].shape[0]
    closed_early_rate = closed_early / total if total else 0

    return total, closed_early, closed_early_rate, aging, overdue

# Collect KPI Data
final_data = {'KPI_Name': [], 'functionname': [], 'Organization': [], 'Month': [], 'Value': []}

for region, companies in regions.items():
    total, early, rate, aging, overdue = calculate_kpis(df_filtered, companies, region)
    month = previous_month
    final_data['KPI_Name'].extend(['Complaint Timeliness', 'Complaint Timeliness',
                                   'Complaint Aging', 'Complaint Aging',
                                   'Complaint Aging Overdue', 'Complaint Aging Overdue'])
    final_data['functionname'].extend(['Denominator', 'Numerator'] * 3)
    final_data['Organization'].extend([region] * 6)
    final_data['Month'].extend([month] * 6)
    final_data['Value'].extend([total, early, total, aging, total, overdue])

kpi_df = pd.DataFrame(final_data)
kpi_df.to_excel("C:/Users/FEriam01/OneDrive/Documents/Oversight metrics/2025/April/March Data/Adjusted/final_output_PQMS_Dec_New_Calc.xlsx", index=False)
print("KPI data saved.")
