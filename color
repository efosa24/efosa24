# pip install pandas numpy matplotlib seaborn scikit-learn xgboost prophet openpyxl

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_absolute_error, mean_squared_error
from prophet import Prophet

# ----------------------------------------
# 1. Load Data
# ----------------------------------------
df = pd.read_csv("updated_complaints_data.csv")  # Replace with your local path
df['Date Received'] = pd.to_datetime(df['Date Received'], errors='coerce')
df = df.dropna(subset=['Date Received', 'Product', 'Region', 'Complaint Description'])

# ----------------------------------------
# 2. EDA (Exploratory Data Analysis)
# ----------------------------------------
df['Month'] = df['Date Received'].dt.to_period('M').dt.to_timestamp()
df['Complaint Count'] = 1

# Monthly total volume
monthly_data = df.groupby('Month').agg({'Tracking Number': 'count'}).reset_index()
monthly_data.rename(columns={'Tracking Number': 'Complaint Count'}, inplace=True)

# Plot monthly trend
plt.figure(figsize=(12, 5))
sns.lineplot(data=monthly_data, x='Month', y='Complaint Count', marker='o')
plt.title("Monthly Complaint Volume")
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.savefig("eda_monthly_volume.png")

# By Region
plt.figure(figsize=(12, 5))
region_monthly = df.groupby(['Month', 'Region'])['Complaint Count'].sum().reset_index()
sns.lineplot(data=region_monthly, x='Month', y='Complaint Count', hue='Region', marker='o')
plt.title("Monthly Complaint Volume by Region")
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig("eda_by_region.png")

# By Product
plt.figure(figsize=(12, 5))
product_monthly = df.groupby(['Month', 'Product'])['Complaint Count'].sum().reset_index()
sns.lineplot(data=product_monthly, x='Month', y='Complaint Count', hue='Product', marker='o')
plt.title("Monthly Complaint Volume by Product")
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig("eda_by_product.png")

# By Complaint Description
plt.figure(figsize=(12, 5))
desc_monthly = df.groupby(['Month', 'Complaint Description'])['Complaint Count'].sum().reset_index()
sns.lineplot(data=desc_monthly, x='Month', y='Complaint Count', hue='Complaint Description', marker='o')
plt.title("Monthly Complaint Volume by Complaint Description")
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig("eda_by_description.png")

# ----------------------------------------
# 3. Prepare Data for Forecasting
# ----------------------------------------
ts_data = monthly_data.set_index('Month')

# Prepare ML feature set
ml_data = df.groupby(['Month', 'Product', 'Region', 'Complaint Description'])['Complaint Count'].sum().reset_index()
for col in ['Product', 'Region', 'Complaint Description']:
    ml_data[col] = LabelEncoder().fit_transform(ml_data[col])

X = ml_data.drop(columns=['Complaint Count'])
y = ml_data['Complaint Count']

X_train = X[X['Month'] < '2024-01-01'].drop(columns=['Month'])
X_test = X[X['Month'] >= '2024-01-01'].drop(columns=['Month'])
y_train = y[X['Month'] < '2024-01-01']
y_test = y[X['Month'] >= '2024-01-01']

# ----------------------------------------
# 4. Train Forecasting Models
# ----------------------------------------
# Random Forest
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_preds = rf.predict(X_test)

# XGBoost
xgb = XGBRegressor(n_estimators=100, random_state=42)
xgb.fit(X_train, y_train)
xgb_preds = xgb.predict(X_test)

# Prophet
prophet_df = ts_data.reset_index().rename(columns={'Month': 'ds', 'Complaint Count': 'y'})
prophet = Prophet()
prophet.fit(prophet_df)
future = prophet.make_future_dataframe(periods=12, freq='M')
forecast_prophet = prophet.predict(future)

# ----------------------------------------
# 5. Evaluation Metrics
# ----------------------------------------
def evaluate_model(y_true, y_pred, name):
    return {
        "Model": name,
        "MAE": round(mean_absolute_error(y_true, y_pred), 2),
        "RMSE": round(np.sqrt(mean_squared_error(y_true, y_pred)), 2)
    }

metrics_df = pd.DataFrame([
    evaluate_model(y_test, rf_preds, "Random Forest"),
    evaluate_model(y_test, xgb_preds, "XGBoost"),
    evaluate_model(prophet_df['y'], forecast_prophet.loc[:len(prophet_df)-1, 'yhat'], "Prophet")
])

# ----------------------------------------
# 6. Export Results
# ----------------------------------------
forecast_df = pd.DataFrame({
    'Month': pd.date_range(start=ts_data.index[-1] + pd.offsets.MonthBegin(), periods=12, freq='M'),
    'Prophet Forecast': forecast_prophet.tail(12)['yhat'].values
})

forecast_df.to_excel("final_forecast_output.xlsx", index=False)
metrics_df.to_excel("final_forecast_metrics.xlsx", index=False)

print("✅ Forecasts saved to 'final_forecast_output.xlsx'")
print("✅ Accuracy metrics saved to 'final_forecast_metrics.xlsx'")
print("✅ EDA charts saved as PNG files")
