#Assign Priority
def assign_priority(seriousness):
    if seriousness == "Serious":
        return 1
    elif seriousness == "Priority":
        return 1
    elif seriousness == "Non-Priority":
        return 2
    elif seriousness == "Lack of Effect":
        return 3
    elif seriousness == "Non-Serious":
        return 2
    elif seriousness == "Adverse Event":
        return 3
    elif seriousness == "AE Level 1":
        return 3
    elif seriousness == "AE Level 2":
        return 3
    elif seriousness == "AE Level 3":
        return 3
    elif seriousness == "Serious AE":
        return 3
    elif seriousness == "Preference":
        return  4
    else:
        return None
df['Priority'] = df['seriousness'].apply(assign_priority)

#Sort by tracking number and priority and remove duplicates 
df = df.sort_values(by=['tracking_no_link','Priority'])
#Drop duplicates
df = df.drop_duplicates(subset='tracking_no_link', keep='first')


def processed_data(df):
    # Assign 'Enterprise' column based on conditions
    df['Enterprise'] = np.where(df['seriousness'].isin(['Adverse Event', 'AE Level 1', 'AE Level 2', 'AE Level 3', 'Serious AE']), 'Adverse Event',
                        np.where(df['seriousness'].isin(['Non-Serious', 'Serious', 'Lack of Effect', 'Priority', 'Non-Priority']), 'PQC',
                        np.where(df['seriousness'] == 'Preference', 'Preference', np.nan)))
    
    # Filter the dataframe
    df_filtered = df[~((df['Enterprise'] == 'Adverse Event') & (~df['reg_class'].isin(['MEDICAL DEVICE', 'MEDICAL DEVICE II'])))]
    return df_filtered

df_filtered = processed_data(df)


# Calculate the previous month
today = datetime.today()
first_day_of_current_month = today.replace(day=1)
last_day_of_previous_month = first_day_of_current_month - timedelta(days=1)
previous_month = last_day_of_previous_month.strftime('%m/%d/%Y')
# Define regions and their corresponding companies
regions = {
    'NA': ["J&J Consumer","NUTRITIONALS","McNeil Consumer","J&J Canada","North America Consumer","North America Drug"],
    'APAC': ['APAC'],
    'EMEA': ['EMEA'],
    'LATAM': ['LATAM']
}

# Function to calculate numerators and denominators for different KPIs
def calculate_kpis(df_filtered, region_companies):
    region_df = df_filtered[df_filtered['company'].isin(region_companies)]
    total_cases = region_df.shape[0]
    
    closed_early_cases = region_df[(region_df['issue_age'] <= 45)].shape[0]
    complaint_aging_cases = region_df[(region_df['issue_status'] == 'Open') & (region_df['issue_age'] > 365)].shape[0]
    complaint_aging_overdue_cases = region_df[(region_df['issue_status'] == 'Open') & (region_df['issue_age'] > 45)].shape[0]
    
    closed_early_value = (closed_early_cases / total_cases ) if total_cases > 0 else 0
    complaint_aging_value = (complaint_aging_cases ) if total_cases > 0 else 0
    complaint_aging_overdue_value = (complaint_aging_overdue_cases ) if total_cases > 0 else 0
    
    
    return total_cases, closed_early_cases, closed_early_value, complaint_aging_value, complaint_aging_overdue_value

# Creating the final DataFrame in the required format
final_data = {
    'KPI_Name': [],
    'functionname': [],
    'Organization': [],
    'Month': [],
    'Value': []
}

for region, companies in regions.items():
    total_cases, closed_early_cases, closed_early_value, complaint_aging_value, complaint_aging_overdue_value = calculate_kpis(df_filtered, companies)
    
    # Complaint Timeliness

    final_data['KPI_Name'].extend(['Complaint Timeliness'] * 2)
    final_data['functionname'].extend(['Denominator', 'Numerator'])
    final_data['Organization'].extend([region] * 2)
    final_data['Month'].extend([previous_month] * 2)
    final_data['Value'].extend([total_cases, closed_early_cases])

    # Complaint Aging
    final_data['KPI_Name'].extend(['Complaint Aging'] * 2)
    final_data['functionname'].extend(['Denominator', 'Numerator'])
    final_data['Organization'].extend([region] * 2)
    final_data['Month'].extend([previous_month] * 2)
    final_data['Value'].extend([total_cases, complaint_aging_value])

    # Complaint Aging Overdue
    final_data['KPI_Name'].extend(['Complaint Aging Overdue'] * 2)
    final_data['functionname'].extend(['Denominator', 'Numerator'])
    final_data['Organization'].extend([region] * 2)
    final_data['Month'].extend([previous_month] * 2)
    final_data['Value'].extend([total_cases, complaint_aging_overdue_value])

# Creating the final DataFrame
final_df = pd.DataFrame(final_data)
