import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Load Data (Replace with actual data sources)
df1 = pd.read_csv("closed_early_cases.csv")  # Data for Closed Early Cases
df2 = pd.read_csv("complaint_aging.csv")     # Data for Complaint Aging & Overdue Cases

# Convert dates to datetime format
for df in [df1, df2]:
    df['iss_entrd_pqms'] = pd.to_datetime(df['iss_entrd_pqms'], format='mixed')
    df['jnj_aware_dt'] = pd.to_datetime(df['jnj_aware_dt'], format='mixed')

    # Calculate date difference and adjusted issue age
    df['date difference'] = (df['iss_entrd_pqms'] - df['jnj_aware_dt']).dt.days
    df['adjusted_issue_age'] = (df['issue_age'] - df['date difference'])

    # Assign Priority
    def assign_priority(seriousness):
        priority_mapping = {
            "Serious": 1, "Priority": 1, "Non-Priority": 2, "Non-Serious": 2,
            "Lack of Effect": 3, "Adverse Event": 3, "AE Level 1": 3, "AE Level 2": 3,
            "AE Level 3": 3, "Serious AE": 3, "Preference": 4
        }
        return priority_mapping.get(seriousness, None)
    
    df['Priority'] = df['seriousness'].apply(assign_priority)

    # Sort and remove duplicates
    df.sort_values(by=['tracking_no_link', 'Priority'], inplace=True)
    df.drop_duplicates(subset='tracking_no_link', keep='first', inplace=True)

# Define function to process data
def processed_data(df):
    df['Enterprise'] = np.where(df['seriousness'].isin(['Adverse Event', 'AE Level 1', 'AE Level 2', 'AE Level 3', 'Serious AE']), 'Adverse Event',
                        np.where(df['seriousness'].isin(['Non-Serious', 'Serious', 'Lack of Effect', 'Priority', 'Non-Priority']), 'PQC',
                        np.where(df['seriousness'] == 'Preference', 'Preference', np.nan)))
    
    df_filtered = df[~((df['Enterprise'] == 'Adverse Event') & (~df['reg_class'].isin(['MEDICAL DEVICE', 'MEDICAL DEVICE II'])))]
    return df_filtered

df1_filtered = processed_data(df1)
df2_filtered = processed_data(df2)

# Calculate the previous month
today = datetime.today()
first_day_of_current_month = today.replace(day=1)
last_day_of_previous_month = first_day_of_current_month - timedelta(days=1)
previous_month = last_day_of_previous_month.strftime('%m/%d/%Y')

# Define regions and their corresponding companies
regions = {
    'NA': ["J&J Consumer", "NUTRITIONALS", "McNeil Consumer", "J&J Canada", "North America Consumer", "North America Drug"],
    'APAC': ['APAC'],
    'EMEA': ['EMEA'],
    'LATAM': ['LATAM']
}

# Function to calculate KPIs
def calculate_kpis(df_filtered, region_companies):
    region_df = df_filtered[df_filtered['company'].isin(region_companies)]
    total_cases = region_df.shape[0]
    
    closed_early_cases = region_df[(region_df['issue_age'] <= 45)].shape[0]
    complaint_aging_cases = region_df[(region_df['issue_status'] == 'Open') & (region_df['issue_age'] > 365)].shape[0]
    complaint_aging_overdue_cases = region_df[(region_df['issue_status'] == 'Open') & (region_df['issue_age'] > 45)].shape[0]
    
    closed_early_value = closed_early_cases / total_cases if total_cases > 0 else 0
    complaint_aging_value = complaint_aging_cases if total_cases > 0 else 0
    complaint_aging_overdue_value = complaint_aging_overdue_cases if total_cases > 0 else 0
    
    return total_cases, closed_early_cases, closed_early_value, complaint_aging_value, complaint_aging_overdue_value

# Creating the final DataFrame in the required format
final_data = {
    'KPI_Name': [],
    'functionname': [],
    'Organization': [],
    'Month': [],
    'Value': []
}

for region, companies in regions.items():
    total_cases, closed_early_cases, closed_early_value, complaint_aging_value, complaint_aging_overdue_value = calculate_kpis(df1_filtered, companies)
    
    # Complaint Timeliness
    final_data['KPI_Name'].extend(['Complaint Timeliness'] * 2)
    final_data['functionname'].extend(['Denominator', 'Numerator'])
    final_data['Organization'].extend([region] * 2)
    final_data['Month'].extend([previous_month] * 2)
    final_data['Value'].extend([total_cases, closed_early_cases])

    # Complaint Aging (Using the same denominator as Complaint Timeliness)
    final_data['KPI_Name'].extend(['Complaint Aging'] * 2)
    final_data['functionname'].extend(['Denominator', 'Numerator'])
    final_data['Organization'].extend([region] * 2)
    final_data['Month'].extend([previous_month] * 2)
    final_data['Value'].extend([total_cases, complaint_aging_value])

    # Complaint Aging Overdue (Using the same denominator as Complaint Timeliness)
    final_data['KPI_Name'].extend(['Complaint Aging Overdue'] * 2)
    final_data['functionname'].extend(['Denominator', 'Numerator'])
    final_data['Organization'].extend([region] * 2)
    final_data['Month'].extend([previous_month] * 2)
    final_data['Value'].extend([total_cases, complaint_aging_overdue_value])

# Creating the final DataFrame
final_df = pd.DataFrame(final_data)

# Save to CSV (optional)
final_df.to_csv("final_kpi_report.csv", index=False)
