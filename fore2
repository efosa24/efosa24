import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
import warnings

warnings.filterwarnings("ignore")

# Simulate data
regions = ['NA', 'EMEA', 'LATAM', 'APAC']
dates = pd.date_range(start='2021-01-01', end='2023-12-01', freq='MS')

data = []
for region in regions:
    base = 100 + 20 * regions.index(region)
    for date in dates:
        count = base + np.random.randint(-15, 15)
        data.append({'region': region, 'iss_entrd_pqms': date, 'Complaint Count': count})

df = pd.DataFrame(data)
df['Month'] = pd.to_datetime(df['iss_entrd_pqms']).dt.to_period('M').dt.to_timestamp()

# Add global
global_df = df.groupby('Month', as_index=False)['Complaint Count'].sum()
global_df['region'] = 'Global'
df = pd.concat([df, global_df], ignore_index=True)

# Forecasting function
def evaluate_models(monthly_df):
    monthly_df = monthly_df.set_index('Month').resample('M').sum()
    y = monthly_df['Complaint Count'].dropna()

    if len(y) < 12 or y.nunique() < 2:
        return None

    models = {}

    try:
        hw = ExponentialSmoothing(y, seasonal='add', seasonal_periods=12).fit()
        hw_fitted = hw.fittedvalues
        hw_forecast = hw.forecast(12)

        resid_std = np.std(y - hw_fitted)
        ci95 = 1.96 * resid_std
        forecast_index = pd.date_range(start=y.index[-1] + pd.offsets.MonthBegin(), periods=12, freq='M')
        forecast_df = pd.DataFrame({
            'ds': forecast_index,
            'yhat': np.round(hw_forecast.values),
            'yhat_lower': np.round(hw_forecast.values - ci95),
            'yhat_upper': np.round(hw_forecast.values + ci95)
        })

        hw_rmse = np.sqrt(mean_squared_error(y, hw_fitted))
        hw_resid = y.values - hw_fitted
        models['Holt-Winters'] = (hw_rmse, forecast_df, y, hw_fitted, hw_resid)
    except:
        pass

    try:
        arima = ARIMA(y, order=(1, 1, 1)).fit()
        arima_fitted = arima.predict(start=1, end=len(y), typ='levels')
        arima_forecast_obj = arima.get_forecast(steps=12)
        arima_forecast_mean = arima_forecast_obj.predicted_mean
        arima_ci = arima_forecast_obj.conf_int(alpha=0.05)

        forecast_df = pd.DataFrame({
            'ds': pd.date_range(start=y.index[-1] + pd.offsets.MonthBegin(), periods=12, freq='M'),
            'yhat': np.round(arima_forecast_mean.values),
            'yhat_lower': np.round(arima_ci.iloc[:, 0].values),
            'yhat_upper': np.round(arima_ci.iloc[:, 1].values)
        })

        arima_rmse = np.sqrt(mean_squared_error(y[1:], arima_fitted))
        arima_resid = y[1:].values - arima_fitted
        models['ARIMA'] = (arima_rmse, forecast_df, y[1:], arima_fitted, arima_resid)
    except:
        pass

    if not models:
        return None

    return min(models.items(), key=lambda x: x[1][0])  # (model_name, tuple)

# Forecasting loop
output_dir = "region_forecasts"
os.makedirs(output_dir, exist_ok=True)

summary = []

for region in df['region'].unique():
    print(f"\n🔍 Processing: {region}")
    region_df = df[df['region'] == region]
    monthly_df = region_df.groupby('Month', as_index=False)['Complaint Count'].sum()

    result = evaluate_models(monthly_df)
    if result is None:
        print(f"Skipping {region} – all models failed.")
        continue

    best_model_name, (rmse, forecast, y_true, fitted, resid) = result

    forecast_df = forecast.rename(columns={
        'ds': 'Month',
        'yhat': 'Predicted Complaints',
        'yhat_lower': 'Lower CI',
        'yhat_upper': 'Upper CI'
    })

    forecast_path = os.path.join(output_dir, f"{region}_forecast.xlsx")
    forecast_df.to_excel(forecast_path, index=False)

    # Plot
    plt.figure(figsize=(12, 6))
    plt.plot(y_true.index, y_true.values, label='Actual', color='black')
    plt.plot(y_true.index, fitted, label='Fitted', linestyle='--')
    plt.plot(forecast_df['Month'], forecast_df['Predicted Complaints'], label='Forecast', color='blue')
    plt.fill_between(
        forecast_df['Month'],
        forecast_df['Lower CI'].astype(float),
        forecast_df['Upper CI'].astype(float),
        color='skyblue', alpha=0.3, label='Confidence Interval'
    )
    plt.title(f"{region} - {best_model_name} Forecast")
    plt.xlabel("Month")
    plt.ylabel("Complaints")
    plt.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()

    plot_path = os.path.join(output_dir, f"{region}_{best_model_name}_plot.png")
    plt.savefig(plot_path)
    plt.close()

    summary.append({
        'Region': region,
        'Best Model': best_model_name,
        'RMSE': round(rmse, 2),
        'Forecast Excel': forecast_path,
        'Plot': plot_path
    })

# Save summary
summary_df = pd.DataFrame(summary)
summary_df.to_excel(os.path.join(output_dir, "forecast_summary.xlsx"), index=False)

print("\n✅ Forecasting complete. All outputs saved in:", output_dir)
