def rename_col(df):
        # Rename columns and process the DataFrame
        df.rename(columns={
            'CMPLN_NUM': 'tracking_no_link',
            'ASGN_GRP_CD': 'owner_grp',
            'IMPAC_CAT_CD': 'seriousness',
            'RGLT_CLS_CD':"reg_class",
             "FMLY_CD":"prod_fmly_nm",
             "CMPLN_STS_CD":"issue_status" ,	
             "CASE_AGE_DAYS_NBR":"issue_age" ,	
             "CLSE_BY":"iss_cls_oper_id",
             "ASGN_NM":"iss_stat_esig_id",
             "ALERT_DTTM":"jnj_aware_dt" ,
             "LVL3_DESC":"cat_desc" ,	
             "END_DTTM":"iss_cls_dt" ,
             "RES_GOAL_DAYS_NBR":"cyc_time_init" ,
             "IMPAC_STRT_DTTM":"iss_entrd_gcc",
             "COMM_MODE_CD":"issue_from" ,
             #"CRT_DTTM":"iss_entrd_pqms",
             "CAT_CRT_DTTM":"iss_reopen_dt" ,
             "CTRY_NM":"issue_cntry",
             "LVL_2_DESC":"fmly_lvl2_desc" ,
             "RGN_CD":"region" ,
             "CO_NM":"company"
        }, inplace=True)
        
rename_col(df1)  
rename_col(df2)


# --- Step 1: Data Processing for df1 (closed_early_cases) ---

df1['iss_entrd_pqms'] = pd.to_datetime(df1['iss_entrd_pqms'], format='mixed')
df1['jnj_aware_dt'] = pd.to_datetime(df1['jnj_aware_dt'], format='mixed')

df1['date_difference'] = (df1['iss_entrd_pqms'] - df1['jnj_aware_dt']).dt.days
df1['adjusted_issue_age'] = df1['issue_age'] - df1['date_difference']

#Convert time stamp to datetime
df1["iss_entrd_pqms"] = pd.to_datetime(df1["iss_entrd_pqms"], utc = True)
#df1["iss_entrd_pqms"] = df1["iss_entrd_pqms"].dt.strftime("%-m/%-d/%Y %-I:%M")

#Define date range 
start_date = pd.to_datetime('2025-01-10', utc=True)
end_date = pd.to_datetime('2025-02-13 23:59:59', utc=True)
#####

#Filter dateframe 
df1= df1[(df1['iss_entrd_pqms'] >=start_date) & (df1['iss_entrd_pqms'] <=end_date)]


# Assign Priority for df1
def assign_priority(seriousness):
    if seriousness == "Serious":
        return 1
    elif seriousness == "Priority":
        return 1
    elif seriousness == "Non-Priority":
        return 2
    elif seriousness == "Lack of Effect":
        return 3
    elif seriousness == "Non-Serious":
        return 2
    elif seriousness == "Adverse Event":
        return 3
    elif seriousness == "AE Level 1":
        return 3
    elif seriousness == "AE Level 2":
        return 3
    elif seriousness == "AE Level 3":
        return 3
    elif seriousness == "Serious AE":
        return 3
    elif seriousness == "Preference":
        return 4
    else:
        return None

df1['Priority'] = df1['seriousness'].apply(assign_priority)
df1 = df1.sort_values(by=['tracking_no_link', 'Priority'])
df1 = df1.drop_duplicates(subset='tracking_no_link', keep='first')


print("Rows in data1 but not in data23:", len(df1))


# Apply additional processing to df1 (filtering for 'Enterprise' column)
def processed_data(df):
    df['Enterprise'] = np.where(df['seriousness'].isin(['Adverse Event', 'AE Level 1', 'AE Level 2', 'AE Level 3', 'Serious AE']), 'Adverse Event',
                        np.where(df['seriousness'].isin(['Non-Serious', 'Serious', 'Lack of Effect', 'Priority', 'Non-Priority']), 'PQC',
                        np.where(df['seriousness'] == 'Preference', 'Preference', np.nan)))
    
    df_filtered = df[~((df['Enterprise'] == 'Adverse Event') & (~df['reg_class'].isin(['MEDICAL DEVICE', 'MEDICAL DEVICE II'])))]

    return df_filtered

df1_filtered = processed_data(df1)
