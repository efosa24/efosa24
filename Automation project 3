import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from wordcloud import WordCloud
from datetime import datetime, timedelta
from PIL import Image

# -------------------------
# Load Data
# -------------------------
data = pd.read_csv("updated_complaints_data.csv", parse_dates=["Date Received", "Closed Date", "Date Entered"])
data['Month-Year'] = data['Date Received'].dt.to_period('M').astype(str)

# -------------------------
# Setup
# -------------------------
regions = ['APAC', 'EMEA', 'LATAM', 'NA']
metrics_titles = ['Complaint Timeliness', 'Open Aging Overdue', 'Complaint Aging',
                  'Change Log Timeliness', 'MFT Timeliness', 'Triage Timeliness']

# Date range calculation
def calculate_dates_for_previous_month():
    today = datetime.now()
    first_day_this_month = today.replace(day=1)
    last_day_previous_month = first_day_this_month - timedelta(days=1)
    prev_month = last_day_previous_month.month
    prev_year = last_day_previous_month.year
    start_date = datetime(prev_year, prev_month, 1)

    while start_date.month == prev_month:
        end_date = start_date + timedelta(days=27)
        next_month_start = (end_date + timedelta(days=1)).replace(day=1)
        days_remaining = (next_month_start - end_date - timedelta(days=1)).days
        if days_remaining == 7:
            end_date += timedelta(days=days_remaining)
        return start_date - timedelta(days=45), end_date - timedelta(days=45)

def extract_data_for_previous_month(df):
    df['Date Entered'] = pd.to_datetime(df['Date Entered'], errors='coerce')
    start_date, end_date = calculate_dates_for_previous_month()
    return df[(df['Date Entered'] >= start_date) & (df['Date Entered'] <= end_date)]

filtered_df = extract_data_for_previous_month(data)
filtered_start, filtered_end = calculate_dates_for_previous_month()
report_title = f"Global CV Oversight Monthly Report - {filtered_end.strftime('%B %Y')}"
title_range_str = f"Data Period: {filtered_start.strftime('%b %d, %Y')} to {filtered_end.strftime('%b %d, %Y')}"
dashboard_link = "https://your-dashboard-link.com"

# -------------------------
# Metrics + Plot Functions
# -------------------------
def create_metrics(df, region):
    df = df[df['Region'] == region].drop_duplicates(subset='Tracking Number')
    closed = df[df['Closed Date'].notna()]
    total_closed = closed.shape[0]
    closed_early = closed[closed['Issue Age'] <= 45].shape[0]
    complaint_timeliness = (closed_early / total_closed * 100) if total_closed > 0 else 0

    open_cases = df[df['Issue Status'] == 'Open']
    open_aging = open_cases[(open_cases['Issue Age'] > 45) & (open_cases['Issue Age'] <= 365)].shape[0]
    complaint_aging = open_cases[open_cases['Issue Age'] > 365].shape[0]
    open_aging_pct = (open_aging / total_closed * 100) if total_closed > 0 else 0
    complaint_aging_pct = (complaint_aging / total_closed * 100) if total_closed > 0 else 0

    mft = df[df['Closure ID'] == 'Mcward']
    mft_timeliness = (mft[mft['Issue Age'] <= 45].shape[0] / len(mft) * 100) if len(mft) > 0 else 0

    changelog = df[df['Closure ID'] != 'Mcward']
    changelog_timeliness = (changelog[changelog['Issue Age'] <= 45].shape[0] / len(changelog) * 100) if len(changelog) > 0 else 0

    triage = df[df['Process Step'].str.lower() == 'step']
    triage_timeliness = (triage[triage['Issue Age'] <= 45].shape[0] / len(triage) * 100) if len(triage) > 0 else 0

    return {
        'Complaint Timeliness': complaint_timeliness,
        'Open Aging Overdue': open_aging_pct,
        'Complaint Aging': complaint_aging_pct,
        'Change Log Timeliness': changelog_timeliness,
        'MFT Timeliness': mft_timeliness,
        'Triage Timeliness': triage_timeliness
    }

def get_summary_counts(df, region, metric):
    df = df[df['Region'] == region].drop_duplicates(subset='Tracking Number')
    summary = {}
    if metric == 'Complaint Timeliness':
        closed = df[df['Closed Date'].notna()]
        summary = {
            'Total Complaints': df.shape[0],
            'Total Closed': closed.shape[0],
            'On-Time': closed[closed['Issue Age'] <= 45].shape[0],
            'Late': closed[closed['Issue Age'] > 45].shape[0]
        }
    elif metric == 'Change Log Timeliness':
        log = df[df['Closure ID'] != 'Mcward']
        summary = {
            'Total Change Log': log.shape[0],
            'On-Time': log[log['Issue Age'] <= 45].shape[0],
            'Late': log[log['Issue Age'] > 45].shape[0]
        }
    elif metric == 'MFT Timeliness':
        mft = df[df['Closure ID'] == 'Mcward']
        summary = {
            'Total MFT': mft.shape[0],
            'On-Time': mft[mft['Issue Age'] <= 45].shape[0],
            'Late': mft[mft['Issue Age'] > 45].shape[0]
        }
    elif metric == 'Triage Timeliness':
        triage = df[df['Process Step'].str.lower() == 'step']
        summary = {
            'Total Triage': triage.shape[0],
            'On-Time': triage[triage['Issue Age'] <= 45].shape[0],
            'Late': triage[triage['Issue Age'] > 45].shape[0]
        }
    return summary

def plot_doughnut(ax, early_pct, label, title):
    late_pct = 100 - early_pct
    ax.pie([early_pct, late_pct],
           labels=[f"Early: {early_pct:.1f}%", f"Late: {late_pct:.1f}%"],
           startangle=90, counterclock=False,
           colors=['green', 'red'],
           wedgeprops={'width': 0.3})
    ax.set_title(f"{title}\n({label})", fontsize=10)

# -------------------------
# Create Report
# -------------------------

pdf_path = "Final_Global_CV_Oversight_Report_With_Summary_Doughnuts.pdf"
pdf = PdfPages(pdf_path)

# Title Page
fig_title = plt.figure(figsize=(11, 8.5))
plt.axis('off')
plt.text(0.5, 0.75, report_title, fontsize=24, ha='center', weight='bold')
plt.text(0.5, 0.6, title_range_str, fontsize=14, ha='center')
plt.text(0.5, 0.45, "See more detail:", fontsize=14, ha='center')
plt.text(0.5, 0.4, dashboard_link, fontsize=12, ha='center', color='blue')
pdf.savefig(fig_title)
plt.close(fig_title)

# Summary Doughnut Charts
for metric in metrics_titles:
    fig, axs = plt.subplots(2, 4, figsize=(14, 6))
    fig.suptitle(f"{metric} (Doughnut Chart with Summary)", fontsize=14)
    for i, region in enumerate(regions):
        summary = get_summary_counts(filtered_df, region, metric)
        ax_summary = axs[0, i]
        ax_summary.axis('off')
        ypos = 0.9
        for key, value in summary.items():
            ax_summary.text(0.5, ypos, f"{key}: {value}", fontsize=10, ha='center')
            ypos -= 0.2
        pct = create_metrics(filtered_df, region)[metric]
        plot_doughnut(axs[1, i], pct, region, metric)
    pdf.savefig(fig)
    plt.close(fig)

# Grouped Bar Charts
for metric in metrics_titles:
    history = []
    for month in sorted(filtered_df['Month-Year'].unique()):
        monthly = filtered_df[filtered_df['Month-Year'] == month]
        row = {'Month-Year': month}
        for region in regions:
            row[region] = create_metrics(monthly, region)[metric]
        history.append(row)
    df_hist = pd.DataFrame(history).set_index("Month-Year")

    fig, ax = plt.subplots(figsize=(14, 6))
    index = np.arange(len(df_hist))
    bar_width = 0.2
    for i, region in enumerate(regions):
        ax.bar(index + i * bar_width, df_hist[region], width=bar_width, label=region)
    ax.set_title(f"Monthly Trend: {metric} (Grouped Bar Chart)")
    ax.set_ylabel("Percentage")
    ax.set_xticks(index + bar_width * 1.5)
    ax.set_xticklabels(df_hist.index, rotation=90)
    ax.legend()
    pdf.savefig(fig)
    plt.close(fig)

# Word Clouds
for region in regions:
    region_df = filtered_df[filtered_df['Region'] == region]
    top_products = region_df['Product'].value_counts().nlargest(3).index.tolist()
    for product in top_products:
        desc_text = " ".join(region_df[region_df['Product'] == product]['Complaint Description'].dropna().astype(str))
        if desc_text.strip():
            wc = WordCloud(width=1600, height=800, background_color='white').generate(desc_text)
            fig_wc = plt.figure(figsize=(14, 7))
            plt.imshow(wc, interpolation='bilinear')
            plt.axis('off')
            plt.title(f"Word Cloud for '{product}' in {region}", fontsize=18)
            pdf.savefig(fig_wc)
            plt.close(fig_wc)

pdf.close()
print(f"âœ… Report saved to: {pdf_path}")
