import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from wordcloud import WordCloud
from datetime import datetime, timedelta
from numpy import ceil
from PyPDF2 import PdfReader, PdfWriter

# Load dataset
df = pd.read_csv("updated_complaints_metrics_data.csv", parse_dates=[
    "Date Received", "Closed Date", "Date Entered", "Insert Date",
    "Process Step Start Date", "Process Step End Date"
])
df['Complaint Description'] = df['Complaint Description'].astype(str).fillna('')
df['Tracking Number'] = df['Tracking Number'].astype(str)
df['Region'] = df['Region'].fillna('Unknown')
df['Month-Year'] = df['Date Received'].dt.to_period('M').astype(str)

# Timeliness logic
df['Time in Step'] = (df['Process Step End Date'] - df['Process Step Start Date']).dt.days
df['Time in Step'] = df['Time in Step'].apply(lambda x: ceil(x) if pd.notnull(x) else None)
df['Device Type'] = df['Reg Class'].apply(lambda x: 'Device' if isinstance(x, str) and 'Device' in x else 'Non-device')
df['Serious'] = df['Seriousness'].apply(lambda x: 'Priority' if str(x).strip() in ['Priority', 'Serious AE'] else 'Non-priority')

owner_group_late_list = ['Forte Washington', 'Lancaster', 'Las Piedras',
                         'McNeil EM Investigator', 'McNeil US OTC Home Office']
df['Late Device'] = ((df['Device Type'] == 'Device') & (df['Time in Step'] > 8)).map({True: 'Late', False: 'Not Late'})
df['Late Priority'] = ((df['Device Type'] == 'Device') & (df['Serious'] == 'Priority') & (df['Time in Step'] > 2)).map({True: 'Late', False: 'Not Late'})
df['Late Non-Priority'] = ((df['Device Type'] == 'Device') &
                           ((df['Serious'] == 'Non-priority') | (df['Owner Group'].isin(owner_group_late_list))) &
                           (df['Time in Step'] > 4)).map({True: 'Late', False: 'Not Late'})
df['Late 10 Days'] = (df['Time in Step'] > 10).map({True: 'Late', False: 'Not Late'})
df['Triage Late'] = ((df['Late Device'] == 'Late') | (df['Late Priority'] == 'Late') |
                     (df['Late Non-Priority'] == 'Late') | (df['Late 10 Days'] == 'Late')).map({True: 'Late', False: 'Not Late'})

df['MFT Time Diff'] = (df['Insert Date'] - df['Date Entered']).dt.days
df['MFT Late'] = df['MFT Time Diff'].apply(lambda x: 'Late' if pd.notnull(x) and x > 10 else 'Not Late')

def calculate_changelog_late(row):
    if pd.isnull(row['Closed Date']) or pd.isnull(row['Date Entered']):
        return 'Not Late'
    date_diff = (row['Closed Date'].ceil('D') - row['Date Entered'].ceil('D')).days
    if str(row['Seriousness']).strip() in ['Priority', 'Serious AE']:
        return 'Late' if date_diff > 2 else 'Not Late'
    return 'Late' if date_diff > 4 else 'Not Late'
df['Change Log Late'] = df.apply(calculate_changelog_late, axis=1)

# Calendar logic
def calculate_dates_for_previous_month():
    today = datetime.now()
    first_day_this_month = today.replace(day=1)
    last_day_previous_month = first_day_this_month - timedelta(days=1)
    prev_month = last_day_previous_month.month
    prev_year = last_day_previous_month.year
    start_date = datetime(prev_year, prev_month, 1)
    while start_date.month == prev_month:
        end_date = start_date + timedelta(days=27)
        next_month_start = (end_date + timedelta(days=1)).replace(day=1)
        days_remaining = (next_month_start - end_date - timedelta(days=1)).days
        if days_remaining == 7:
            end_date += timedelta(days=days_remaining)
        return start_date - timedelta(days=45), end_date - timedelta(days=45)

def extract_data_for_previous_month(df):
    df['Date Entered'] = pd.to_datetime(df['Date Entered'], errors='coerce')
    start_date, end_date = calculate_dates_for_previous_month()
    return df[(df['Date Entered'] >= start_date) & (df['Date Entered'] <= end_date)]

filtered_start, filtered_end = calculate_dates_for_previous_month()
filtered_df = extract_data_for_previous_month(df)

# Plotting logic
regions = ['APAC', 'EMEA', 'LATAM', 'NA']
metrics_definitions = {
    'Complaint Timeliness': lambda df: df[df['Closed Date'].notna()],
    'Change Log Timeliness': lambda df: df[df['Closure ID'] != 'Mcward'],
    'MFT Timeliness': lambda df: df[df['Closure ID'] == 'Mcward'],
    'Triage Timeliness': lambda df: df[df['Process Step'].str.lower() == 'step']
}
late_logic = {
    'Complaint Timeliness': lambda df: df['Issue Age'] > 45,
    'Change Log Timeliness': lambda df: df['Change Log Late'] == 'Late',
    'MFT Timeliness': lambda df: df['MFT Late'] == 'Late',
    'Triage Timeliness': lambda df: df['Triage Late'] == 'Late'
}

def draw_summary_and_doughnut(df, metric):
    fig, axs = plt.subplots(2, len(regions), figsize=(16, 6))
    fig.suptitle(f"{metric} - Summary & Doughnut Charts", fontsize=16)
    for i, region in enumerate(regions):
        region_df = df[df['Region'] == region].drop_duplicates(subset='Tracking Number')
        metric_df = metrics_definitions[metric](region_df)
        if metric in late_logic:
            late_condition = late_logic[metric](metric_df)
            late = metric_df[late_condition].shape[0]
            on_time = metric_df[~late_condition].shape[0]
        else:
            on_time = late = 0
        total = on_time + late
        early_pct = (on_time / total * 100) if total else 0
        late_pct = 100 - early_pct
        axs[0, i].axis('off')
        axs[0, i].text(0.5, 0.8, f"Region: {region}", ha='center', fontsize=10)
        axs[0, i].text(0.5, 0.6, f"Total: {total}", ha='center', fontsize=10)
        axs[0, i].text(0.5, 0.4, f"On-Time: {on_time}", ha='center', fontsize=10)
        axs[0, i].text(0.5, 0.2, f"Late: {late}", ha='center', fontsize=10)
        colors = ['green', 'red'] if early_pct >= 98 else ['yellow', 'red'] if early_pct >= 95 else ['red', 'darkred']
        axs[1, i].pie([early_pct, late_pct],
                      labels=[f"On-Time: {early_pct:.1f}%", f"Late: {late_pct:.1f}%"],
                      startangle=90,
                      counterclock=False,
                      colors=colors,
                      wedgeprops=dict(width=0.3))
        axs[1, i].set_title(region)
    return fig

# Aging metrics doughnuts
def draw_aging_doughnut(df, metric):
    fig, axs = plt.subplots(2, len(regions), figsize=(16, 6))
    fig.suptitle(f"{metric} - Summary & Doughnut Charts", fontsize=16)
    for i, region in enumerate(regions):
        region_df = df[df['Region'] == region].drop_duplicates(subset='Tracking Number')
        closed_cases = region_df[region_df['Closed Date'].notna()]
        total_closed = closed_cases.shape[0]
        if metric == 'Open Aging Overdue':
            aging_cases = region_df[(region_df['Issue Status'] == 'Open') & (region_df['Issue Age'] > 45) & (region_df['Issue Age'] <= 365)]
        elif metric == 'Complaint Aging':
            aging_cases = region_df[(region_df['Issue Status'] == 'Open') & (region_df['Issue Age'] > 365)]
        overdue_count = aging_cases.shape[0]
        overdue_pct = (overdue_count / total_closed * 100) if total_closed else 0
        ontime_pct = 100 - overdue_pct
        axs[0, i].axis('off')
        axs[0, i].text(0.5, 0.8, f"Region: {region}", ha='center', fontsize=10)
        axs[0, i].text(0.5, 0.6, f"Total Closed: {total_closed}", ha='center', fontsize=10)
        axs[0, i].text(0.5, 0.4, f"Overdue: {overdue_count}", ha='center', fontsize=10)
        colors = ['green', 'red'] if ontime_pct >= 98 else ['yellow', 'red'] if ontime_pct >= 95 else ['red', 'darkred']
        axs[1, i].pie([ontime_pct, overdue_pct],
                      labels=[f"On-Time: {ontime_pct:.1f}%", f"Overdue: {overdue_pct:.1f}%"],
                      startangle=90,
                      counterclock=False,
                      colors=colors,
                      wedgeprops=dict(width=0.3))
        axs[1, i].set_title(region)
    return fig

# Word clouds
df['Complaint Description Translated'] = df['Complaint Description'].apply(lambda x: x + " (EN)" if x.strip() else x)

pdf = PdfPages("Final_Complaint_Metrics_Report_Fixed.pdf")

# Title Page
fig_title = plt.figure(figsize=(11, 8.5))
plt.axis('off')
title = f"Global CV Oversight Monthly Report - {filtered_end.strftime('%B %Y')}"
subtitle = f"Data Period: {filtered_start.strftime('%b %d, %Y')} to {filtered_end.strftime('%b %d, %Y')}"
plt.text(0.5, 0.75, title, fontsize=24, ha='center', weight='bold')
plt.text(0.5, 0.6, subtitle, fontsize=14, ha='center')
plt.text(0.5, 0.45, "See more details:", fontsize=14, ha='center')
plt.text(0.5, 0.4, "https://your-dashboard-link.com", fontsize=12, ha='center', color='blue')
pdf.savefig(fig_title)
plt.close(fig_title)

# Metric summaries
for metric in metrics_definitions:
    fig = draw_summary_and_doughnut(filtered_df, metric)
    pdf.savefig(fig)
    plt.close(fig)

# Aging metrics
for metric in ['Open Aging Overdue', 'Complaint Aging']:
    fig = draw_aging_doughnut(filtered_df, metric)
    pdf.savefig(fig)
    plt.close(fig)

# Word Clouds
for region in regions:
    region_df = filtered_df[filtered_df['Region'] == region]
    top_products = region_df['Product'].value_counts().nlargest(3).index.tolist()
    for product in top_products:
        desc_text = " ".join(region_df[region_df['Product'] == product]['Complaint Description Translated'].dropna().astype(str))
        if desc_text.strip():
            wc = WordCloud(width=1600, height=800, background_color='white').generate(desc_text)
            fig_wc = plt.figure(figsize=(14, 7))
            plt.imshow(wc, interpolation='bilinear')
            plt.axis('off')
            plt.title(f"Word Cloud for '{product}' in {region}", fontsize=18)
            pdf.savefig(fig_wc)
            plt.close(fig_wc)

pdf.close()
