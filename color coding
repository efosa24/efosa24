# Get actual month values for test set
test_months = X[X['Month'] >= '2024-01-01']['Month']

# RF Forecast
axs[1, 0].plot(test_months, y_test.values, label='Observed')
axs[1, 0].plot(test_months, rf_preds, label='RF Predicted')
axs[1, 0].set_title("Random Forest Forecast")
axs[1, 0].legend()
axs[1, 0].grid(True)

# RF Residuals
axs[1, 1].plot(test_months, rf_resid)
axs[1, 1].set_title("Random Forest Residuals")
axs[1, 1].grid(True)

# XGB Forecast
axs[2, 0].plot(test_months, y_test.values, label='Observed')
axs[2, 0].plot(test_months, xgb_preds, label='XGB Predicted')
axs[2, 0].set_title("XGBoost Forecast")
axs[2, 0].legend()
axs[2, 0].grid(True)

# XGB Residuals
axs[2, 1].plot(test_months, xgb_resid)
axs[2, 1].set_title("XGBoost Residuals")
axs[2, 1].grid(True)

####
for ax in axs[:, 0]:  # Forecasts
    ax.tick_params(axis='x', rotation=45)

for ax in axs[:, 1]:  # Residuals
    ax.tick_params(axis='x', rotation=45)


######
SUM(IF [Complaint Timeliness Status] = "On-time" THEN 1 ELSE 0 END) 
/ COUNT([Complaint Timeliness Status])
####

IF [Complaint Timeliness Status] = "Late" THEN "Yellow"
ELSE
    IF [On-time %] >= 0.98 THEN "Green"
    ELSEIF [On-time %] >= 0.95 THEN "Yellow"
    ELSE "Red"
    END
END
