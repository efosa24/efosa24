# Full End-to-End Forecasting Script with Sample Data and Output

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
from prophet import Prophet
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import warnings

warnings.filterwarnings("ignore")

# ---------------------------------------------
# 0. Sample Data Generation
# ---------------------------------------------
data = {
    'tracking_no_link': [f'TR{i}' for i in range(1, 101)],
    'seriousness': np.random.choice(['Serious', 'Non-Serious', 'Lack of Effect', 'AE Level 1'], 100),
    'company': np.random.choice(['APAC', 'EMEA', 'LATAM', 'North America Consumer', 'North America Drug'], 100),
    'iss_entrd_pqms': pd.date_range(start='2021-01-01', periods=100, freq='W'),
    'product': np.random.choice(['Product A', 'Product B', 'Product C', 'Product D'], 100),
    'litigation': np.random.choice(['Yes', 'No'], 100),
    'prog_event': np.random.choice(['Event 1', 'Event 2', 'Event 3'], 100),
    'reg_class': np.random.choice(['MEDICAL DEVICE', 'MEDICAL DEVICE II', 'NON-MEDICAL'], 100)
}
df = pd.DataFrame(data)

# ---------------------------------------------
# 1. Data Cleaning & Feature Engineering
# ---------------------------------------------
def assign_priority(seriousness):
    if seriousness in ["Serious", "Priority"]:
        return 1
    elif seriousness in ["Non-Priority", "Non-Serious"]:
        return 2
    elif seriousness in ["Lack of Effect"]:
        return 3
    elif seriousness in ["Adverse Event", "AE Level 1", "AE Level 2", "AE Level 3", "Serious AE"]:
        return 4
    elif seriousness == "Preference":
        return 5
    return None

def processed_data(df):
    df['Enterprise'] = np.where(
        df['seriousness'].isin(['Adverse Event', 'AE Level 1', 'AE Level 2', 'AE Level 3', 'Serious AE']),
        'Adverse Event',
        np.where(
            df['seriousness'].isin(['Non-Serious', 'Serious', 'Lack of Effect', 'Priority', 'Non-Priority']),
            'PQC',
            np.where(df['seriousness'] == 'Preference', 'Preference', np.nan)
        )
    )
    return df[~((df['Enterprise'] == 'Adverse Event') & (~df['reg_class'].isin(['MEDICAL DEVICE', 'MEDICAL DEVICE II'])))]

df['Priority'] = df['seriousness'].apply(assign_priority)
df = df.sort_values(by=['tracking_no_link', 'Priority']).drop_duplicates('tracking_no_link', keep='first')
df = processed_data(df)
df = df.drop_duplicates(subset='tracking_no_link', keep='first')

company_to_region = {
    'APAC': 'APAC', 'EMEA': 'EMEA', 'LATAM': 'LATAM',
    'North America Consumer': 'NA', 'North America Drug': 'NA', 'NUTRITIONALS': 'NA'
}
df['region'] = df['company'].map(company_to_region).fillna('NA')
df['iss_entrd_pqms'] = pd.to_datetime(df['iss_entrd_pqms'], errors='coerce')
df['Month'] = df['iss_entrd_pqms'].dt.to_period('M').dt.to_timestamp()
df['Complaint Count'] = 1

global_df = df.groupby('Month', as_index=False)['Complaint Count'].sum()
global_df['region'] = 'Global'
df = pd.concat([df, global_df], ignore_index=True)

for col in ['product', 'litigation', 'prog_event']:
    df[col] = df[col].astype(str)
    df[col] = LabelEncoder().fit_transform(df[col])

df = df.sort_values(['product', 'Month'])
df['Lag_1'] = df.groupby('product')['Complaint Count'].shift(1)
df['Lag_2'] = df.groupby('product')['Complaint Count'].shift(2)
df.dropna(subset=['Lag_1', 'Lag_2'], inplace=True)

# ---------------------------------------------
# 2. Forecasting Models
# ---------------------------------------------
def run_prophet(df):
    prophet_df = df[['Month', 'Complaint Count', 'product', 'litigation', 'prog_event', 'Lag_1', 'Lag_2']].copy()
    prophet_df.rename(columns={'Month': 'ds', 'Complaint Count': 'y'}, inplace=True)
    model = Prophet()
    for col in ['product', 'litigation', 'prog_event', 'Lag_1', 'Lag_2']:
        model.add_regressor(col)
    model.fit(prophet_df)
    future = prophet_df[['ds', 'product', 'litigation', 'prog_event', 'Lag_1', 'Lag_2']].copy()
    last_row = future.iloc[-1:]
    future = pd.concat([future, pd.concat([last_row]*12)], ignore_index=True)
    future['ds'] = pd.date_range(start=future['ds'].max() + pd.offsets.MonthBegin(), periods=12, freq='M')
    forecast = model.predict(future)
    return forecast

def run_random_forest(df):
    X = df[['product', 'litigation', 'prog_event', 'Lag_1', 'Lag_2']]
    y = df['Complaint Count']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=12, shuffle=False)
    model = RandomForestRegressor()
    model.fit(X_train, y_train)
    preds = model.predict(X_test)
    return preds, y_test.values

def run_xgboost(df):
    X = df[['product', 'litigation', 'prog_event', 'Lag_1', 'Lag_2']]
    y = df['Complaint Count']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=12, shuffle=False)
    model = XGBRegressor()
    model.fit(X_train, y_train)
    preds = model.predict(X_test)
    return preds, y_test.values

# ---------------------------------------------
# 3. Forecast by Region/Product/Global
# ---------------------------------------------
def evaluate_forecast(sub_df, label):
    os.makedirs('forecast_outputs', exist_ok=True)
    result = {}
    try:
        forecast = run_prophet(sub_df)
        y_pred = forecast['yhat'][-12:].values
        y_true = sub_df['Complaint Count'].values[-12:]
        resid = y_true - y_pred
        result['Prophet'] = (y_pred, y_true, resid, forecast[['ds', 'yhat_lower', 'yhat_upper']])
    except Exception as e:
        print(f"Prophet failed for {label}: {e}")
    try:
        rf_pred, rf_true = run_random_forest(sub_df)
        result['RandomForest'] = (rf_pred, rf_true, rf_true - rf_pred, None)
    except Exception as e:
        print(f"RF failed for {label}: {e}")
    try:
        xgb_pred, xgb_true = run_xgboost(sub_df)
        result['XGBoost'] = (xgb_pred, xgb_true, xgb_true - xgb_pred, None)
    except Exception as e:
        print(f"XGB failed for {label}: {e}")

    for model, (pred, actual, resid, ci) in result.items():
        plt.figure(figsize=(12, 5))
        plt.subplot(1, 2, 1)
        plt.plot(actual, label='Actual', linestyle='--', marker='o')
        plt.plot(pred, label='Forecast', marker='x')
        if ci is not None:
            plt.fill_between(range(len(ci)), ci['yhat_lower'][-12:], ci['yhat_upper'][-12:], color='lightblue', alpha=0.5)
        plt.title(f"{label} Forecast - {model}")
        plt.legend()
        plt.grid(True)

        plt.subplot(1, 2, 2)
        plt.plot(resid, label='Residuals', color='orange', marker='d')
        plt.axhline(0, linestyle='--', color='black')
        plt.title("Residuals")
        plt.grid(True)
        plt.tight_layout()

        plot_path = f"forecast_outputs/{label}_{model}_plot.png"
        plt.savefig(plot_path)
        plt.close()

        forecast_df = pd.DataFrame({
            'Month': pd.date_range(start=sub_df['Month'].max() + pd.offsets.MonthBegin(), periods=12, freq='M'),
            'Forecast': pred,
            'Actual': actual,
            'Residual': resid
        })
        forecast_df.to_excel(f"forecast_outputs/{label}_{model}_forecast.xlsx", index=False)

# Run forecasts
evaluate_forecast(df[df['region'] == 'Global'], 'Global')
for reg in df['region'].unique():
    evaluate_forecast(df[df['region'] == reg], f"Region_{reg}")
top_products = df['product'].value_counts().nlargest(5).index.tolist()
for prod in top_products:
    evaluate_forecast(df[df['product'] == prod], f"Product_{prod}")

print("âœ… Forecasting complete. Check 'forecast_outputs' folder for results.")
