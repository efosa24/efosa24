def evaluate_models(monthly_df):
    monthly_df = monthly_df.set_index('Month').resample('M').sum()
    y = monthly_df['Complaint Count'].dropna()

    print("✅ Model input length:", len(y))
    print("✅ Unique complaint counts:", y.nunique())

    if len(y) < 12 or y.nunique() < 2:
        print("⚠️ Skipping: insufficient data or constant values.")
        return None

    models = {}

    try:
        print("🧠 Trying Prophet...")
        prophet_df = y.reset_index().rename(columns={'Month': 'ds', 'Complaint Count': 'y'})
        prophet = Prophet(yearly_seasonality='auto', changepoint_prior_scale=0.1)
        prophet.fit(prophet_df)
        future = prophet.make_future_dataframe(periods=12, freq='M')
        forecast = prophet.predict(future)

        forecast_final = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(12)
        prophet_fitted = forecast['yhat'][:len(y)].values
        prophet_rmse = np.sqrt(mean_squared_error(y, prophet_fitted))
        prophet_resid = y.values - prophet_fitted

        models['Prophet'] = (prophet_rmse, forecast_final, y, prophet_fitted, prophet_resid)
        print(f"✅ Prophet RMSE: {prophet_rmse:.2f}")
    except Exception as e:
        print(f"❌ Prophet failed: {e}")

    try:
        print("🧠 Trying Holt-Winters...")
        hw_model = ExponentialSmoothing(y, seasonal='add', seasonal_periods=12).fit()
        hw_fitted = hw_model.fittedvalues
        hw_forecast = hw_model.forecast(12)

        resid_std = np.std(y - hw_fitted)
        ci95 = 1.96 * resid_std
        forecast_index = pd.date_range(start=y.index[-1] + pd.offsets.MonthBegin(), periods=12, freq='M')
        forecast_df = pd.DataFrame({
            'ds': forecast_index,
            'yhat': hw_forecast.values,
            'yhat_lower': hw_forecast.values - ci95,
            'yhat_upper': hw_forecast.values + ci95
        })

        hw_rmse = np.sqrt(mean_squared_error(y, hw_fitted))
        hw_resid = y.values - hw_fitted
        models['Holt-Winters'] = (hw_rmse, forecast_df, y, hw_fitted, hw_resid)
        print(f"✅ Holt-Winters RMSE: {hw_rmse:.2f}")
    except Exception as e:
        print(f"❌ Holt-Winters failed: {e}")

    try:
        print("🧠 Trying ARIMA...")
        arima_model = ARIMA(y, order=(1, 1, 1)).fit()
        arima_fitted = arima_model.predict(start=1, end=len(y), typ='levels')

        arima_forecast_obj = arima_model.get_forecast(steps=12)
        arima_forecast_mean = arima_forecast_obj.predicted_mean
        arima_ci = arima_forecast_obj.conf_int(alpha=0.05)

        forecast_df = pd.DataFrame({
            'ds': pd.date_range(start=y.index[-1] + pd.offsets.MonthBegin(), periods=12, freq='M'),
            'yhat': arima_forecast_mean.values,
            'yhat_lower': arima_ci.iloc[:, 0].values,
            'yhat_upper': arima_ci.iloc[:, 1].values
        })

        arima_rmse = np.sqrt(mean_squared_error(y[1:], arima_fitted))
        arima_resid = y[1:].values - arima_fitted
        models['ARIMA'] = (arima_rmse, forecast_df, y[1:], arima_fitted, arima_resid)
        print(f"✅ ARIMA RMSE: {arima_rmse:.2f}")
    except Exception as e:
        print(f"❌ ARIMA failed: {e}")

    if not models:
        print("❌ All models failed.")
        return None

    best_model = min(models.items(), key=lambda x: x[1][0])
    print(f"🏆 Best Model: {best_model[0]}")
    return best_model[0], best_model[1]
